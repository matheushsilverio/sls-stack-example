service: ms-users

plugins:
  - serverless-offline
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-domain-manager
provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 1024 # <- Set the memory application require (after run, check CloudWatch Logs and see memory realy used )
  timeout: 10 # <- Time this micro service avaliable after first call
  description: 'TEMPLATE SERVERLESS'
  stage: ${opt:stage, 'local'} # <-- Change for PROD in secrets.json
  region: us-east-1 # <- Region deploy this micro service
  environment:
    STAGE: ${opt:stage, 'local'}
    DATABASE_PORT: 5432
    DATABASE_NAME: 'local'
    DATABASE_USERNAME: 'user@admin.com'
    DATABASE_PASSWORD: 'admin'
    DATABASE_HOST: 'localhost'

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
functions: # <- Here the magic!
  getAllByCategory:
    handler: src/useCases/GetAllByCategory/index.handler
    description: get
    events:
      - http:
          path: /categories/{category} # Path endpoint e.g. /users/all
          method: GET # <-- GET | POST | PUT | DELETE | PATH
          cors:
            origin: '*'
            headers: ${self:custom.allowed-headers}
            methods:
              - OPTIONS
              - GET # <-- Set equal method up
            allowCredentials: false
  getById:
    handler: src/useCases/GetById/index.handler
    description: get
    events:
      - http:
          path: /{movieId} # Path endpoint e.g. /users/all
          method: GET # <-- GET | POST | PUT | DELETE | PATH
          cors:
            origin: '*'
            headers: ${self:custom.allowed-headers}
            methods:
              - OPTIONS
              - GET # <-- Set equal method up
            allowCredentials: false

custom:
  allowed-headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
  EndPoint:
    version: v1
    name: example
    domain: localhost
  customDomain:
    domainName: ${self:custom.EndPoint.domain}
    certificateName: ${self:custom.EndPoint.domain}
    basePath: ${self:provider.stage}/${self:custom.EndPoint.version}/${self:custom.EndPoint.name}
    stage: ${self:provider.stage}
    endpointType: regional
    securityPolicy: tls_1_2
    apiType: rest
    createRoute53Record: false
  bundle:
    linting: false
